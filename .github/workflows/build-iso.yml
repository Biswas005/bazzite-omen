---
name: Build Bazzite-Omen ISO
# This workflow builds the Bazzite-Omen ISO images using bootc-image-builder directly

on:
  workflow_dispatch:
    inputs:
      upload-to-s3:
        description: "Upload to S3"
        required: false
        default: false
        type: boolean
      platform:
        required: true
        type: choice
        options:
          - amd64
          - arm64
  pull_request:
    branches:
      - main
    paths:
      - './iso.toml'
      - './.github/workflows/build-iso.yml'
      - './Justfile'
      - './Containerfile'
  push:
    branches:
      - main
    paths:
      - './iso.toml'
      - './Containerfile'

env:
  IMAGE_NAME: "${{ github.event.repository.name }}"
  IMAGE_REGISTRY: "ghcr.io/${{ github.repository_owner }}"
  DEFAULT_TAG: "latest"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}-${{ inputs.platform }}
  cancel-in-progress: true

jobs:
  build-iso:
    name: Build Bazzite-Omen ISO (${{ matrix.variant }}-${{ inputs.platform || 'amd64' }})
    runs-on: ${{ (inputs.platform == 'arm64' || matrix.platform == 'arm64') && 'ubuntu-24.04-arm64' || 'ubuntu-24.04' }}
    
    strategy:
      fail-fast: false
      matrix:
        platform: ${{ inputs.platform && fromJson(format('["{0}"]', inputs.platform)) || fromJson('["amd64"]') }}
        variant:
          - name: "regular"
            suffix: ""
          - name: "nvidia"
            suffix: ""

    permissions:
      contents: read
      packages: read
      id-token: write

    steps:
      - name: Lowercase registry
        run: |
          echo "IMAGE_REGISTRY=${IMAGE_REGISTRY,,}" >> ${GITHUB_ENV}
          echo "IMAGE_NAME=${IMAGE_NAME,,}" >> ${GITHUB_ENV}
      
      - name: Install dependencies
        run: |
          set -x
          sudo apt update -y
          sudo apt install -y \
            podman \
            qemu-user-static \
            systemd-container

      - name: Maximize build space (AMD64 only)
        if: matrix.platform != 'arm64'
        run: |
          # Remove unnecessary packages to free up space
          sudo apt-get remove -y \
            azure-cli \
            google-chrome-stable \
            firefox \
            powershell \
            mono-devel \
            dotnet-* \
            llvm-* \
            mysql-* \
            postgresql-* \
            mongodb-* \
            snapd \
            docker-* \
            containerd.io
          sudo apt-get autoremove -y
          sudo apt-get autoclean
          
          # Clean up additional space
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          
          df -h

      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Setup Just
        uses: extractions/setup-just@e33e0265a09d6d736e2ee1e0eb685ef1de4669ff # v3

      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT

      - name: Create variant-specific iso.toml
        run: |
          cat > iso-${{ matrix.variant.name }}.toml << EOF
          distro = "fedora-41"
          [customizations.installer.kickstart]
          contents = """
          %post
          bootc switch --mutate-in-place --transport registry ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}${{ matrix.variant.suffix }}:${{ env.DEFAULT_TAG }}
          %end
          """
          [customizations.installer.modules]
          enable = [
          "org.fedoraproject.Anaconda.Modules.Storage",
          "org.fedoraproject.Anaconda.Modules.Network",
          "org.fedoraproject.Anaconda.Modules.Security",
          "org.fedoraproject.Anaconda.Modules.Services",
          "org.fedoraproject.Anaconda.Modules.Users",
          "org.fedoraproject.Anaconda.Modules.Subscription",
          "org.fedoraproject.Anaconda.Modules.Timezone"
          ]
          disable = [
          ]
          EOF

      - name: Setup output directory
        run: |
          mkdir -p ./output
          echo "OUTPUT_DIR=$(pwd)/output" >> $GITHUB_ENV

      - name: Build Bazzite-Omen ISO using bootc-image-builder directly
        id: build
        run: |
          set -x
          
          # Pull the bootc-image-builder container
          podman pull ghcr.io/centos-workstation/bootc-image-builder:latest
          
          # Set architecture for container
          ARCH="${{ matrix.platform }}"
          if [ "$ARCH" = "amd64" ]; then
            ARCH="x86_64"
          elif [ "$ARCH" = "arm64" ]; then
            ARCH="aarch64"
          fi
          
          # Create the build command
          BUILD_CMD="podman run --rm -it --privileged \
            --pull=newer \
            --security-opt label=type:unconfined_t \
            -v $(pwd)/iso-${{ matrix.variant.name }}.toml:/config.toml:ro \
            -v ${{ env.OUTPUT_DIR }}:/output \
            -v /var/lib/containers/storage:/var/lib/containers/storage \
            ghcr.io/centos-workstation/bootc-image-builder:latest \
            --type iso \
            --arch ${ARCH} \
            --config /config.toml \
            --rootfs btrfs \
            ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}${{ matrix.variant.suffix }}:${{ env.DEFAULT_TAG }}"
          
          echo "Running: $BUILD_CMD"
          eval $BUILD_CMD
          
          # Set output for next steps
          echo "output-directory=${{ env.OUTPUT_DIR }}" >> $GITHUB_OUTPUT
          
          # List what was created
          echo "Build completed, contents of output directory:"
          ls -la ${{ env.OUTPUT_DIR }}/

      - name: Move and rename ISO files
        if: steps.build.outcome == 'success'
        shell: bash
        run: |
          cd ${{ env.OUTPUT_DIR }}
          
          # Create a descriptive filename
          ISO_NAME="bazzite-omen-${{ matrix.variant.name }}-${{ steps.date.outputs.date }}-${{ matrix.platform }}"
          
          # Find the ISO file and rename it
          ISO_FILE=$(find . -name "*.iso" -type f | head -1)
          if [ -n "$ISO_FILE" ] && [ -f "$ISO_FILE" ]; then
            echo "Found ISO file: $ISO_FILE"
            mv "$ISO_FILE" "${ISO_NAME}.iso"
            echo "Renamed to: ${ISO_NAME}.iso"
          else
            echo "No ISO file found in output directory"
            ls -la
            exit 1
          fi
          
          # Create checksums
          if [ -f "${ISO_NAME}.iso" ]; then
            sha256sum "${ISO_NAME}.iso" > "${ISO_NAME}.iso.sha256"
            echo "iso_filename=${ISO_NAME}.iso" >> $GITHUB_OUTPUT
            echo "Created checksum file: ${ISO_NAME}.iso.sha256"
          fi
          
          # Show final results
          echo "Final output files:"
          ls -la *.iso* || true
        id: rename

      - name: Upload ISO to Job Artifacts
        if: steps.build.outcome == 'success' && inputs.upload-to-s3 != true && github.event_name != 'pull_request'
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: bazzite-omen-iso-${{ matrix.variant.name }}-${{ steps.date.outputs.date }}-${{ matrix.platform }}
          path: |
            ${{ steps.build.outputs.output-directory }}/*.iso
            ${{ steps.build.outputs.output-directory }}/*.sha256
          if-no-files-found: error
          retention-days: 30
          compression-level: 0
          overwrite: true

      - name: Upload to S3
        if: steps.build.outcome == 'success' && inputs.upload-to-s3 == true && github.event_name != 'pull_request'
        shell: bash
        env:
          RCLONE_CONFIG_S3_TYPE: s3
          RCLONE_CONFIG_S3_PROVIDER: ${{ secrets.S3_PROVIDER }}
          RCLONE_CONFIG_S3_ACCESS_KEY_ID: ${{ secrets.S3_ACCESS_KEY_ID }}
          RCLONE_CONFIG_S3_SECRET_ACCESS_KEY: ${{ secrets.S3_SECRET_ACCESS_KEY }}
          RCLONE_CONFIG_S3_REGION: ${{ secrets.S3_REGION }}
          RCLONE_CONFIG_S3_ENDPOINT: ${{ secrets.S3_ENDPOINT }}
          SOURCE_DIR: ${{ steps.build.outputs.output-directory }}
        run: |
          sudo apt-get update
          sudo apt-get install -y rclone
          rclone copy $SOURCE_DIR S3:${{ secrets.S3_BUCKET_NAME }}

      - name: Create Release Summary
        if: steps.build.outcome == 'success'
        run: |
          echo "## ðŸŽ‰ Bazzite-Omen ISO Build Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Build Details:" >> $GITHUB_STEP_SUMMARY
          echo "- **Platform**: ${{ matrix.platform }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Variant**: ${{ matrix.variant.name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Date**: ${{ steps.date.outputs.date }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Base Image**: Bazzite ${{ matrix.variant.name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Target**: HP Omen Gaming Laptops" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -n "${{ steps.rename.outputs.iso_filename }}" ]; then
            echo "### Generated Files:" >> $GITHUB_STEP_SUMMARY
            echo "- ISO: \`${{ steps.rename.outputs.iso_filename }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- Checksum: \`${{ steps.rename.outputs.iso_filename }}.sha256\`" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ inputs.upload-to-s3 }}" == "true" ]; then
            echo "- **Status**: âœ… Uploaded to S3" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Status**: âœ… Available in Job Artifacts" >> $GITHUB_STEP_SUMMARY
          fi